(()
 label: instruction-jump
 out-byte car "J"
 ;; First byte.
 load-address-cb instruction-pointer
 ldp a
 ldi operand1 cb
 stm a
 increment-address instruction-pointer

 ;; Sign extend the first byte.
 (()
  declare-label: skip
  declare-label: end
  ldi operand1 cb
  ldm a
  ldi 0x80 b
  add a
  ldi skip cb
  br.c
  (()
   zero a
   ldi end cb
   jmp)
  (()
   label: skip
   pre a)
  label: end
  ;; Store.
  ldi (1+ operand1) cb
  stm a)
 ;; Optionally read a second byte, overwriting the sign extend.
 (()
  declare-label: skip-second-byte
  ldi opcode-arg-size cb
  ldm a
  zero b
  sub a b a
  ldi skip-second-byte cb
  br.z
  (()
   ;; Read second byte.
   load-address-cb instruction-pointer
   ldp a
   ldi (1+ operand1) cb
   stm a
   increment-address instruction-pointer)
  label: skip-second-byte)

 ;; Add to instruction pointer, permitting overflow (2's complement).
 zero f
 ;; Low byte
 ldi operand1 cb
 ldm a
 ldi instruction-pointer cb
 ldm b
 add a
 ldi (low instruction-pointer) b
 stm a
 ;; High byte
 ldi (1+ operand1) cb
 ldm a
 ldi (1+ instruction-pointer) cb
 ldm b
 add a
 ldi (low 1+ instruction-pointer)  b
 stm a

 jmpi dispatch)
